pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
                name: jenkins-agent
            spec:
                containers:
                -   name: gradle
                    image: gradle:8.5-jdk21-alpine
                    command: ["cat"]
                    tty: true
                -   name: docker
                    image: docker:27.2.0-alpine3.20
                    command: ["cat"]
                    tty: true
                    volumeMounts:
                    -   name: docker-socket
                        mountPath: "/var/run/docker.sock"
                -   name: python
                    image: python:3.13-slim
                    command: ["cat"]
                    tty: true
                volumes:
                -   name: docker-socket
                    hostPath:
                        path: "/var/run/docker.sock"
            '''
        }
    }

    environment {
        JAVA_IMAGE_NAME = 'viroovr/specguard-api'
        PYTHON_IMAGE_NAME = 'viroovr/specguard-nlp'
        JAVA_DIR = 'be18-specguard-backend/backend'
        PYTHON_DIR = 'be18-specguard-backend/python-server'
        
        DISCORD_WEBHOOK_CREDENTIALS_ID = 'specguard-backend-webhook'
        DOCKER_CREDENTIALS_ID = 'dockerhub-access'
    }

    stages {
        stage('Detect Changes') {
            steps {
                script {
                    // ÌòÑÏû¨ Ïª§Î∞ãÍ≥º Ïù¥Ï†Ñ Ïª§Î∞ã(HEAD~1) Í∞ÑÏùò Î≥ÄÍ≤Ω ÌååÏùºÏùÑ Í∞ÄÏ†∏Ïò®Îã§.
                    def changedFiles = sh(script: 'git diff --name-only HEAD~1', returnStdout: true).trim().split("\n")

                    // Ï†ÑÏ≤¥ Î∞∞Ïó¥ÏùÑ Ï§ÑÎ∞îÍøàÏúºÎ°ú Ï∂úÎ†•
                    echo "Changed files:\n${changedFiles.join('\n')}"

                    // ÌòÑÏû¨ Ïª§Î∞ã SHA Ï∂îÏ∂ú (ÏßßÏùÄ ÌòïÌÉú)
                    env.GIT_COMMIT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()

                    echo "GIT_COMMIT : ${env.GIT_COMMIT}"

                    // ÌôòÍ≤Ω Î≥ÄÏàò ÎèôÏ†Å ÏÑ§Ï†ï
                    env.SHOULD_BUILD_JAVA = changedFiles.any { it.startsWith(JAVA_DIR) } ? "true" : "false"
                    env.SHOULD_BUILD_PYTHON  = changedFiles.any { it.startsWith(PYTHON_DIR) } ? "true" : "false"

                    echo "SHOULD_BUILD_JAVA : ${SHOULD_BUILD_JAVA}"
                    echo "SHOULD_BUILD_PYTHON : ${SHOULD_BUILD_PYTHON}"
                }
            }
        }

        stage('Docker Login') {
            steps {
                container('docker') {
                    sh 'docker logout || true'

                    withCredentials([usernamePassword(
                        credentialsId: DOCKER_CREDENTIALS_ID,
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                }
            }
        }

        // ===============================
        // Îã®ÏúÑ ÌÖåÏä§Ìä∏ Stage Ï∂îÍ∞Ä
        // ===============================
        stage('Unit Test (Java)') {
            when {
                expression { env.SHOULD_BUILD_JAVA == "true" }
            }
            steps {
                container('gradle') {
                    dir(JAVA_DIR) {
                        sh 'chmod +x gradlew'
                        sh './gradlew clean test'
                    }
                }
            }
        }

        stage('Java Image Build & Push') {
            when {
                expression {
                    return env.SHOULD_BUILD_JAVA == "true"
                }
            }

            steps {
                container('docker') {
                    dir(JAVA_DIR) {
                        script {
                        def buildNumber = "${env.GIT_COMMIT}"

                        withEnv(["DOCKER_IMAGE_VERSION=${buildNumber}"]) {
                                sh 'docker -v'
                                sh 'echo $JAVA_IMAGE_NAME:$DOCKER_IMAGE_VERSION'
                                sh 'docker build --no-cache -t $JAVA_IMAGE_NAME:$DOCKER_IMAGE_VERSION ./'
                                sh 'docker image inspect $JAVA_IMAGE_NAME:$DOCKER_IMAGE_VERSION'
                                sh 'docker push $JAVA_IMAGE_NAME:$DOCKER_IMAGE_VERSION'
                            }
                        }
                    }
                }
            }
        }

        stage('Python Image Build & Push') {
            when {
                expression {
                    return env.SHOULD_BUILD_PYTHON == "true"
                }
            }

            steps {
                container('docker') {
                    dir(PYTHON_DIR) {
                        script {
                            def buildNumber = "${env.GIT_COMMIT}"

                            withEnv(["DOCKER_IMAGE_VERSION=${buildNumber}"]) {
                                sh 'docker -v'
                                sh 'echo $PYTHON_IMAGE_NAME:$DOCKER_IMAGE_VERSION'
                                sh 'docker build --no-cache -t $PYTHON_IMAGE_NAME:$DOCKER_IMAGE_VERSION ./'
                                sh 'docker image inspect $PYTHON_IMAGE_NAME:$DOCKER_IMAGE_VERSION'
                                sh 'docker push $PYTHON_IMAGE_NAME:$DOCKER_IMAGE_VERSION'
                            }
                        }
                    }
                }
            }
        }

        stage('Trigger specguard-backend-manifests job') {
            steps {
                script {
                    def buildNumber = "${env.GIT_COMMIT}"

                    withEnv(["DOCKER_IMAGE_VERSION=${buildNumber}"]) {
                        build job: 'specguard-backend-manifests',
                        parameters: [
                            string(name: 'DOCKER_IMAGE_VERSION', value: buildNumber),
                            string(name: 'DID_BUILD_JAVA', value: "${env.SHOULD_BUILD_JAVA}"),
                            string(name: 'DID_BUILD_PYTHON', value: "${env.SHOULD_BUILD_PYTHON}")
                        ],
                        wait: true
                    }
                }
            }
        }
    }

    post {
        always {
            withCredentials([string(
                credentialsId: DISCORD_WEBHOOK_CREDENTIALS_ID, 
                variable: 'DISCORD_WEBHOOK_URL'
            )]) {
                discordSend description: """
                üí° **SpecGuard Backend CI/CD ÏïåÎ¶º**
                üîπ Job : ${env.JOB_NAME}
                üîπ Build : ${currentBuild.displayName}
                üîπ Í≤∞Í≥º : ${currentBuild.currentResult}
                üîπ Ïã§Ìñâ ÏãúÍ∞Ñ : ${currentBuild.duration / 1000}s
                """,
                result: currentBuild.currentResult,
                title: "SpecGuard Pipeline : ${currentBuild.displayName}",
                webhookURL: "${DISCORD_WEBHOOK_URL}"
            }
        }
    }
}
