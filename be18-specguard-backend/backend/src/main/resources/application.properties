spring.application.name=backend

server.port=8080

# =========================
# DB (MariaDB)
# =========================
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect

# =========================
# JWT
# =========================
spring.jwt.secret=${SPRING_JWT_SECRET}

app.jwt.access-ttl=${APP_JWT_ACCESS_TTL}
app.jwt.refresh-ttl=${APP_JWT_REFRESH_TTL}
app.jwt.invite-ttl=${APP_JWT_INVITE_TTL}

# Redis Prefix
app.redis.prefix.refresh=${APP_REDIS_PREFIX_REFRESH}
app.redis.prefix.blacklist=${APP_REDIS_PREFIX_BLACKLIST}

# =========================
# SendGrid
# =========================
sendgrid.api.key=${SENDGRID_API_KEY}
sendgrid.mail.from=${SENDGRID_MAIL_FROM}
sendgrid.mail.from-name=${SENDGRID_MAIL_FROM_NAME}
invite.base-url=${INVITE_BASE_URL}

# =========================
# OAuth2 Google
# =========================
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo

# =========================
# OAuth2 Naver
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri=${NAVER_REDIRECT_URI}
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email,birthday,birthyear,mobile
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# =========================
# Redis
# =========================
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.database=${REDIS_DATABASE}


# =========================
# File Storage
# =========================
app.storage.local.base-path=${APP_STORAGE_LOCAL_BASE_PATH}
app.storage.public-base-url=${APP_STORAGE_PUBLIC_BASE_URL}
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# =========================
# Scheduling Cleanup
# =========================
app.timezone=Asia/Seoul
app.cleanup.resume.enabled=true
app.cleanup.resume.cron=0 10 3 * * *
app.cleanup.resume.chunk-size=100
app.cleanup.resume.dry-run=false
spring.task.scheduling.pool.size=2


# =========================
# Codef Certificate
# =========================
codef.demo_client_id=${CODEF_CLIENT_ID}
codef.demo_client_secret=${CODEF_DEMO_CLIENT_SECRET}
codef.public_key=${CODEF_PUBLIC_KEY}


# =========================
# Imap code
# =========================
imap.host=imap.gmail.com
imap.port=993
imap.username=${IMAP_USERNAME}
imap.password=${IMAP_PASSWORD}
verify.imap.enabled=true

# =========================
# mail(SMTP)
# =========================
spring.mail.host=${SPEC_GUARD_MAIL_HOST}
spring.mail.port=${SPEC_GUARD_MAIL_PORT}
spring.mail.username=${SPEC_GUARD_MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=${SPEC_GUARD_MAIL_AUTH}
spring.mail.properties.mail.smtp.starttls.enable=${SPEC_GUARD_MAIL_STARTTLS}
spring.mail.default-encoding=UTF-8
spring.mail.test-connection=true

app.verify.mail-enabled=true


verify.email.enabled=true

# =========================
# Mail verification
# =========================
verify.ttl-seconds=300
verify.max-attempts=5
verify.block-seconds=3600
verify.redis.code-prefix=${APP_REDIS_PREFIX_VERIFY_EMAIL}
verify.redis.attempt-prefix=${APP_REDIS_PREFIX_VERIFY_ATTEMPT}
verify.redis.attempt-ttl-seconds=3600

# =========================
# Redis ? ??? (verify?)
# =========================
app.redis.prefix.verifyEmail=${APP_REDIS_PREFIX_VERIFY_EMAIL}
app.redis.prefix.verifyAttempt=${APP_REDIS_PREFIX_VERIFY_ATTEMPT}
app.redis.prefix.verifyBlock=${APP_REDIS_PREFIX_VERIFY_BLOCK}
app.redis.prefix.session=${APP_REDIS_PREFIX_SESSION}

management.endpoints.web.exposure.include=beans

app.github.token=${GITHUB_TOKEN}

specguard.mail.host=${SPEC_GUARD_MAIL_HOST}
specguard.mail.port=${SPEC_GUARD_MAIL_PORT}
specguard.mail.username=${SPEC_GUARD_MAIL_USERNAME}
specguard.mail.password=${MAIL_PASSWORD}
specguard.mail.auth=true
specguard.mail.starttls=true
specguard.mail.debug=true

frontend.base-url=${FRONTEND_BASE_URL}
python.api.base-url=${NLP_BASE_URL}

# =========================
# Logging
logging.level.com.beyond.specguard=${LOGGING_LEVEL_SPECGUARD:DEBUG}
logging.level.org.springframework.mail=${LOGGING_LEVEL_MAIL:DEBUG}
logging.level.org.springframework.data.redis=${LOGGING_LEVEL_REDIS:DEBUG}
logging.level.org.springframework.boot.autoconfigure.mail=${LOGGING_LEVEL_AUTOMAIL:DEBUG}
